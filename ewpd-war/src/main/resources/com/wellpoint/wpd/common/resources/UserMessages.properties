

## Format for Common Messages.

## Date Segment created successfully.
## Rule deleted successfully.
## Product Scheduled For Test successfully.
## Mandate Published successfully.
## Mandate Publish failed.
## Question Test Pass failed.
## Question Test passed successfully.
## Question Test Fail not done.
## Question Test Fail done.
## Contract Specific Information saved successfully.
## Benefit Component validated successfully.
## Benefit Component validation failed.
## Note rejected successfully.
## Note approve failed.
## Note reject failed.
## Invalid Note Id.
## Benefit Administration creation failed.
## Benefit Administration update failed.
## Maximum 7 terms only allowed

contract.rule.mandatory.valid = Please enter the mandatory fields.
contract.rule.datesegment.valid = Please enter the valid datesegment details.
duplicate.reference.found =Questions with duplicate references found.

indicative.map.delete.success = Indicative mapping deleted successfully.
indicative.map.create.success = Indicative mapping Created successfully.
adminmethodmapping.map.delete.success = Admin Method Mapping Deleted successfully.
admin.method.delete.group=Group deleted successfully
mandate.field.required=Please fill the necessary information

indicative.map.save.success = Indicative mapping Saved successfully.
indicative.map.mandatory.valid = Please enter the mandatory fields.
indicative.map.mandatory.unique.valid = Same combination of Indicative ,SPS parameter and Benefit Name already exists.
admin.map.mandatory.unique.valid = Same combination of Admin Method Number, Processing Method and Description already exists.
ref.map.mandatory.unique.valid = Same Reference mapping already exist for the selected Reference.
benefit.level.sps.no.results = No records found matching the Term, Qualifier, PVA and Data type

question.sps.value.valid = The Reference is mandatory for the selected functional domain.
reference.map.mandatory.valid = Please enter the mandatory fields.
reference.map.line.mandatory.valid = Term, PVA and Data type is mandatory for Line Reference Mapping.
reference.map.term.mandatory.valid = Aggregate is applicable only for two terms.
reference.map.qualifier.mandatory.valid = Aggregate is applicable only for two qualifiers.
reference.map.create.success = The reference mapping is created successfully.
reference.map.edit.success = The reference mapping is updated successfully.
reference.map.delete.success =  Reference mapping deleted successfully.
adminmethod.mapping.create.success = The admin method mapping is created successfully.
std.accumulator.nothingto.save = No modifications to save.
std.accumulator.save.success.info = Standard accumulator mapping saved successfully.

admin.method.is.mapped    =   System would not allow the admin method to be deleted unless all the mappings are removed
admin.method.is.coded     =   System would not allow the admin method to be deleted if the admin method is used in the latest version of a contract.

admin.method.deleted.sucessfully = Admin method no ({0}) and Description ({1}) has been deleted successfully.
admin.method.duplicate.group= The Reference group already exists
admin.method.number.notnumeric = Please Enter Numeric Admin Method Number
adminmethod.maintain.description.length.notexceed= Admin method description length should not exceed 250 character.
adminmethod.maintain.description.comments.length.notexceed = Admin method description and Comments length should not exceed 250 characters.
adminmethod.maintain.comments.length.notexceed= Comments length should not exceed 250 character.
adminmethod.maintain.locate.invalid.criteria = Please enter atleast one search criteria.
adminmethod.maintain.edit.invalid.criteria = No Modifications done. 
## Common Messages.
serviceType.create.delete = Selected mapping for the service type code ({0}) has been deleted successfully.
serviceType.no.unmappedrules = No unmapped rules available.
search.results.zero.for.termpva = Term and PVA combination did not match any records.
search.results.zero = Your Search criteria did not return any results. Please change the criteria and try again.
please.enter.valid.data.for.search = Please enter valid data.
effective.date.not.within.boundary =invalid Effective Date.
please.enter.all.mandatory.fields = Please enter the mandatory fields.
search.result.not.found=Your Search criteria did not return any results. Please change the criteria and try again.
search.result.exceeds= Search results exceeded 50 records. Please refine the search criteria and try again.
search.result.exceeds.limit = Search results exceeded 50 records.
search.result.exceeds.500.limit = Search results exceeded 500 records.
records.not.found = No records found.
filtered.result.exceeds= Filtered results exceeded 50 records. Please refine the search criteria and try again.
requiredField = At least one criteria should be given for a search.
all.fields.blank = At least one criteria should be given for a search.
enter.date.inside= Please enter a date within the range.
text.excceds.limit = Entered text must not exceed 4000 characters.
contract.comment.max.length= Comment should not be more than 4000 characters.
note.attach.success= Notes Attached successfully.

##please.enter.all.mandatory.fields=Missing required input fields.  Please provide data for the marked fields and re-submit the form.
## end of Common Messages.

Select.All.AdminMethods = Please select Admin methods for all Super Process Steps.
mapped.searchresult.notfound = No mapping information found.
servTypeMapping.exists = Given service type mapping already exists.
srv.type.mapping.all.fields.empty = At least one Criteria field should be selected.
srv.type.mapping.created = Service type mapping created successfully.
srv.type.mapping.updated = Service type mapping updated successfully.
srv.type.recquierd.code.alert = Atleast one service Type code is mandatory.
srv.type.mapping.deleted = Service type mapping deleted successfully.
note.insert.successful= Notes Inserted successfully.
note.update.successful= Notes Updated successfully.
note.delete.successful= Notes Deleted successfully.
contract.product.validation = The first test Date Segment should have a product selected.
business.domain.value.all=Sub-Catalog with Business Domain combination ALL, ALL, ALL, ALL is not allowed.
datesegment.created = Date Segment created successfully.
contract.datesegment.validdatesegment.created = Date Segment created successfully.
contract.datesegment.maximumProviderSpecCode = A maximum of only 20 Provider Speciality codes can be attached to a contract datesgement.
enter.date.inside= Please enter a date within the range.
contract.datesegment.validate.startDate = Please provide a Date for creating a Date Segment.
contract.dateinvalid =Invalid {0}.
contract.datesegment.invalid.comments = Please enter a reason for creation before confirmation.
create.contract.datesegment.insufficient.privilege = Insufficient privilege for Contract-Create Date Segment.
locked.by.another.user = Object is already locked by another user.
contract.locked = Contract {0} is already locked by another user.

no.product.enetered = Please complete step5 for further navigation.
no.generalinfo.filled = Please complete step {0} for further navigation.
please.enter.all.mandatory.fields=Please enter the mandatory fields.
please.enter.the.mandatory.field=Please enter the mandatory fields.
common.default=An unknown error occurred during processing.
common.log.id=Please contact IT Support.  Please include the log id in your error report.  Log ID {0}.
mandatory.fields.required = Please enter the mandatory fields.
invalid.criteria.value = Please enter numeric values for numeric dataType Fields.
mandatory.field.required = Please enter the mandatory field.
range.greater.validate = Start criteria should not be greater than End criteria.
contract.benefitrule.updated = Benefit General Information updated successfully.
contract.rule.validate = Please select a new Rule Id if you want to edit the benefit meaning.
contract.rule.default.ruleid = Please change the benefit meaning.
contract.rule.default.benefitmeaning = Please select a new Rule Id if you want to edit the benefit meaning. Otherwise please select default Benefit Meaning as the default Rule Id selected gets saved only with the default Benefit Meaning.
contract.prod.effective.date.invalid=Effective period of Contract should be within the effective period of Product.
contract.domain.copy.invalid=Domain values do not match with Product.
contract.product.expired = Product attached to the Date Segment is in MARKED FOR DELETION status.
contract.note.expired = Note attached to the Date Segment having effective date {0} is in MARKED FOR DELETION status. Please select another Note.
contract.note.expired.dateSegment = Note attached to the Date Segment is in MARKED FOR DELETION status.Please select another Note.
contract.copy.headings = Contract Headings copied successfully.
no.headings.found = No Contract Headings found to be copied.
datafeed.running = Datafeed batch processing.Please try after some time.
contract.product.copy.invalid = The Product attached to the Date Segment is invalid.
uncoded.notes.deleted = Notes on uncoded benefit lines/questions were removed during check-in.

contract.benefits.allhide = The BenefitComponent {0} is hidden , since all the benefits have been hidden.
contract.benefits.hideunhide = The Benefits hide/unhide operation performed successfully.
contract.benefitcomponent.hideunhide = The Benefit Components hide/unhide operation performed succesfully.
update.rules.contract = Rules updated successfully.
no.rules.product = No Rules of the selected type are attached to the Product.
atleast.one.level.for.all.benefits = There should be at least one visible Benefit Level for all Benefits.
no.product.attached = No Product attached.
product.checkin.failure.conflict = {0} selected should match the selected Business Domain.
#delete.rules.contract = Rule deleted successfully.
delete.rules.contract = Rule having EWPD Rule ID {0} deleted successfully.
attach.rules.contract=Rules attached to the Contract successfully.
## datesegment.not.created= Date Segments were not created.
datesegment.not.created= Creating Date Segment(s) failed.
reserved.dates.condition01= Effective Date should be greater than or equal to current date.
id.not.reserved = Contract Ids containing O or I are omitted in the reserved sequence.
reserved.dates.condition= Expiry Date should be within 3 years time period from Effective Date.
input.format.invalid = Invalid {0}.
effective.greater.expiry = Expiry Date must be greater than Effective Date.
expiry.date.should.be.greater.than.effective.date=Expiry Date must be greater than Effective Date.
description.field.should.have.minimum.of.1.characters.and.maximum.of.240.characters= Description field should have a maximum of 240 characters.
description.field.should.have.maximum.of.250.characters = Description field should have a maximum of 250 characters.
description.field.limit = Description field should only have a maximum of {0} characters.
description.field.should.have.minimum.of.2.characters.and.maximum.of.250.characters= Description can have minimum 10 and maximum 250 characters.
description.field.should.have.minimum.of.1.characters.and.maximum.of.250.characters= Description field should have a minimum of 1 and a maximum of 250 characters.
minor.heading.length=Name field should have minimum of 2 characters and maximum of 34 characters.
admin.option.name.length=Name field should have minimum of 1 character and maximum of 250 characters.
please.enter.all.required.information=Please enter the mandatory fields.
mandate.term.required=Benefit Term is mandatory.
mandate.qulaifier.required=Benefit Qualifier is mandatory.
mandate.pva.required=Provider Arrangement is mandatory.
please.enter.correct.date.comparison=Expiry Date must be greater than Effective Date.
please.enter.description=Description can have minimum 10 and maximum 250 characters.
please.enter.mandate.description=Description should be more than 10 characters and less than 500 characters.
Mandate.info.should.be.present=Mandate information should be present to Check in the Benefit.
State.info.should.be.present=State information should be present to Check in the Benefit.
invalid.effective.date = Invalid Effective Date.
invalid.expiry.date = Invalid Expiry Date.
term.not.valid.date = Invalid Contract Term Date.
sales.not.valid.date = Invalid Sales Market Date.

##please.enter.all.mandatory.fields=Missing required input fields.  Please provide data for the marked fields and re-submit the form

text.field.can.have.maximum.only.upto.3000.characters = Text field can have a maximum of up to 3000 characters.

not.valid.number = Invalid Version number.
not.valid.date = Invalid Date.
standard.benefit.null.value=Benefit value is null.
standard.benefit.duplicate.value=Minor Heading already exists. Please enter another Minor Heading.
benefit.should.have.atleast.one.benefit.definition=Standard Benefit should have at least one Benefit Definition.
mandate.benefit.should.have.atleast.one.mandate.definition=Mandate Benefit should have at least one Mandate Definition.
standard.benefit.validation.success=Benefit validated successfully.
standard.benefit.checkin.success=Benefit ({0}) Checked in successfully.
benefit.copy.success=Benefit ({0}) copied successfully.
standard.benefit.copy.failure=Benefit copy failed.
standard.benefit.schedule.for.test.success = Benefit scheduled for test.
standard.benefit.test.pass = Benefit Test Passed.
please.enter.secondary.code = Secondary Code should contain at least 1 character and less than 30 characters.
standard.benefit.test.fail = Benefit Test Failed.
benefit.checked.out.success.info= Benefit ({0}) checked out successfully.
benefit.no.notes.available = No notes available.
please.enter.benefit.plan.name = Benefit Plan Name should contain less than 15 characters.
please.enter.name = Name should contain at least 1 character and less than 30 characters.
please.enter.valid.name = Name should contain less than 30 characters.
mandate.name.length = Mandate Name should contain less that 35 characters.
search.association.message1=No associations found.
basic.search.criteria.error=Error in the search criteria identifier: {0}.
basic.search.criteria.error.at=Error in the search criteria identifier: {0}. Error At Position: {1}.
basic.search.criteria.error.after=Error in the search criteria identifier: {0}. Error After: {1}.
search.results.total.large=Number of search results exceeds 500. It is recommended that you search again after refining the criteria to avoid performance and usability problems.
mandate.info.save.success=Mandate information saved successfully.
mandate.info.update.success=Mandate information updated successfully.
benefit.locked.by.another.user = Benefit ({0}) locked by another user.

###########contract module message starts
contract.already.used = Contract({0}) already used by another User.
contract.domain.invalid = invalid domain value.
update.reserved = Expiry Date updated successfully.
create.reserved = Contract ID(s)- {0} Reserved Successfully.
search.integerfields.id = Please enter a valid integer for the field.
no.contracts= No contracts reserved. Please enter a number greater than 0.
contract.create.successful=Contract created successfully.
contract.create.delete=Contract ({0}) deleted successfully.
contract.basicinfo.save.success = Contract updated successfully.
contract.used.by.another.user = Contract already used by another User.
contract.specificinfo.save.success=Contract Specific Information saved successfully.
contract.pricinginfo.save.success=Contract Pricing Information saved successfully.
contract.pricinginfo.save.duplicate = Pricing information already exists.
contract.pricinginfo.delete.success=Contract Pricing Information deleted successfully.
contract.searchresult.not.found = Contract not found in database.
end.date.greater = End Date should be greater than Start Date.
created.end.date.greater = Created Date end should be greater than the start date.
updated.end.date.greater = Updated Date end should be greater than the start date.
contract.comment.save.success= Contract Comment saved successfully.
contract.system.pool.expired = No Contract ID is available. Please contact IT Administrator.
contract.notes.attach.success = Note(s) attached successfully. Only one Note can be attached to a Contract.
contract.notes.delete.success = Note(s) deleted successfully.
contract.adaptedinfo.save.success = Contract Adapted Information saved successfully.

contract.checkin.successful= Contract ({0}) Checked in successfully.
contract.sentto.test = Contract ({0}) Scheduled For Test successfully.
contract.test.passed = Contract ({0}) Test Passed.
contract.test.failed = Contract ({0}) Test Failed.
contract.unlocked = Contract ({0}) Unlocked successfully.
contract.scheduledto.approve = Contract ({0}) Scheduled For Approval successfully.
contract.approved.successful = Contract ({0}) Approved successfully.
contract.rejected.successful = Contract ({0}) Rejected successfully.
contract.checkout.successful = Contract ({0}) Checked out successfully.
contract.publish.successful = Contract ({0}) Published successfully.
contract.scheduledfor.production = Contract ({0}) Scheduled For Production successfully.
contract.rule.invalidPNR = Penalty method need to be coded for UM, PNR and DENIAL rules attached for the Date Segment having Effective Date {0}.
contract.checkin.invalid.date = Mandatory Information is missing for the Date Segment having Effective Date {0}.
contract.checkin.invalid.pricing = Pricing Information is missing for the Date Segment having Effective Date {0}.
contract.checkin.valid = Contract validated successfully.
reserve.id.notavailable = Reserve ID selected is not available.
effective.date.less = Effective Date should be greater than or equal to  01/01/1900.
effective.date.greater = Effective Date should be less than  12/31/9999.
contract.specificinfo.update.success=Contract Specific Information updated successfully.
contract.benlevelnote.override.success=Benefit Line Notes overridden successfully.
test.date.added = Test Effective Date added successfully.
domain.basecontract.mismatch = Base Date Segment attached to the Contract is not matching with the selected Domain.
single.note.restrict=Only one Note can be attached to a Contract.
single.note.restrict.benefitcomponent = Only one Note can be attached to a Benefit Component.
single.note.restrict.benefit = Only one Note can be attached to a Benefit.
single.note.restrict.benefitline = Only one Note can be attached to a Benefit Line.
cannot.attach.note.to.mandate=Note cannot be attached to a Contract of type Mandate.
standard.benefit.mandate.note=Note cannot be attached to Benefit of Contract type Mandate.
benefit.component.mandate.note=Note cannot be attached to Benefit Component of Contract type Mandate.
corporate.plan.code.required = Corporate Plan Code is mandatory as the Product Family for the selected Product is found to be HMO or POS.
corporate.plan.code.required.checkin = Corporate Plan Code is mandatory as the Product Family for the selected Product is found to be HMO or POS for the Date Segment having Effective Date {0}.
contract.copy.successful = Contract ({0}) copied successfully.
contract.copy.source.successful = Contract copied from Base Contract successfully.
copy.from.other.contracttype = Only Mandate Product can be attached to a Mandate Contract.
copy.from.mandate.contracttype= Only Mandate Contracts can attach Mandate Products.
no.regular.dateSegments =  Contract does not contain any regular Date Segment to Schedule for Production.
contract.id.exists = Contract Id already exists. Please select a different combination of Group, Product and State.
single.regular.delete = The Regular Date Segment cannot be deleted as a contract with test Date Segment should have at least one regular Date Segment.
partial.datesegment.exist = The Date Segment cannot be deleted .Partial datesegment exist in Legacy.  
############contract module message ends

cannot.be.removed= {0} cannot be removed since it is attached in Benefit Definition.
product.checkin.successful= Product ({0}) Checked in successfully.
invalid.citation.number=Citation Number should be an integer.
product.checkin.invalid= At least one Benefit Component should be associated before Check in.
product.checkin.valid=Product validated successfully.
benefit.admin.updated= Benefit Admin values updated successfully.
product.test.successful= Product ({0}) Scheduled For Test successfully.
product.test.failed = Product ({0}) Test Failed.
product.test.passed = Product ({0}) Test Passed.
product.publish.successful= Product Published successfully.
product.schedule_for_approval.successful = Product Scheduled For Approval successfully.
product.approve.successful= Product ({0}) Approved successfully.
product.reject.successful= Product ({0}) Rejected successfully.
product.benefitcomponent.duplicate= Product cannot be Checked in as duplicate Product found with same Benefit Components and order for the Domain.
product.benefitcomponent.duplicate.sendToTest= Duplicate Product found with same Benefit Components and order for the Domain.
product.schedule_test.failure= At least one Benefit Component should be associated before a Product is scheduled for test.
product.checkout.successful= Product ({0})Checked out successfully.
product.seq.empty = Sequence should not be empty.
product.seq.invalid= Sequence should be a number greater than zero.
product.seq.genBen.err= Only General Benefits can have Sequence number 1.
general.benefit.seq.one= Only General Benefits can have Sequence number 1.
general.provision.seq.one =  Only General Provisions can have Sequence number 1.
general.provision.seq.two =  Only General Provisions can have Sequence number 2.
benefit.saved = Benefits saved successfuly.
product.associated.benefit.save.success.info = Benefit Hide Status Updated successfully.
product.structure.associated.benefit.save.success.info = Benefit Hide Status Updated successfully.

#Admin Option Module Messages: Start
adminoption.term.require=  Please choose a Term to apply the Admin Option for a Benefit Level having the selected Qualifier.
adminoption.save.success.info = Admin Option created successfully.
updateadminoption.success.info = Admin Option updated successfully.
adminoptions.save.success.info = Admin Option Hide Status Updated successfully.
adminoption.update.success.info = Questionnaire updated successfully.
question.hide.status.update = Question Hide Status Updated Successfully.
adminoption.already.exist.info = Admin Option already exists.
questionnaire.deleted.success = Question deleted successfully.
adminoption.searchresult.notfound= Your Search criteria did not return any results. Please change the criteria and try again.
question.delete.success.info = Admin Option question deleted successfully.
question.sequence.update.success.info = Admin Option question updated successfully.
adminOption.delete.success.info = Admin Option {0} deleted successfully.
adminOption.delete.all.success.info = All versions of Admin Option {0} deleted successfully.
adminOption.mark.for.delete.success.info = Admin Option {0} marked for deletion.
adminoption.question.already.exist.info = Associated Question already exists.
adminoption.question.not.exist.info = At least one Question should be associated to the Admin Option.
adminoption.checked.in.success.info = Admin Option ({0}) Checked in successfully.
adminoption.checked.out.success.info = Admin Option ({0}) Checked out successfully.
adminoption.checked.in.failure.info = Admin Option ({0}) Check in failed.
adminoption.checked.out.failure.info = Admin Option ({0}) Check out failed.
adminoption.checked.in.validation.success.info = Admin Option ({0}) Check in validation completed successfully.
adminoption.cannot.be.deleted.info = Admin Option {0} cannot be deleted as it is in use.
adminoption.question.cannot.be.deleted.info = Admin Option Question cannot be deleted as it is in use.
publish.adminoption.success.info = Admin Option {0} Published successfully.
publish.adminoption.failure.info = Admin Option {0} Publish failed.
schedule.for.test.adminoption.success.info = Admin Option {0} Scheduled For Test successfully.
schedule.for.test.adminoption.failure.info = Admin Option {0} scheduled for test failed.
testPass.adminoption.success.info = Admin Option {0} Test passed successfully.
testPass.adminoption.failure.info = Admin Option {0} Test Pass failed.
testFail.adminoption.success.info = Admin Option {0} Test Fail done.
testFail.adminoption.failure.info = Admin Option {0} Test Fail not done.
no.admin.option.questions.found.info = No associated questions found.
adminoption.reference.not.exist.info = All Associated Questions does not have a Reference attached.
admin.option.reference.unique = Admin Option Reference should be unique. Duplicate reference identified in the adminoption {2} for the question {0} and {1}.
admin.option.reference.for.two.admin.options.unique = Admin Option Reference should be unique. Duplicate reference identified in the adminoption {2} for the question {0} and {3} for the question {1}.
enter.integers.for.sequence.number=Please enter integers for sequence numbers.
approve.adminoption.success.info=Admin Option {0} Approved successfully.
unlock.adminoption.success.info =Admin Option {0} Unlocked successfully.
reject.adminoption.success.info=Admin Option {0} Rejected successfully.
#Admin Option Module Messages: End


#Mandate Module Messages: Start
mandate.save.success.info = Mandate created successfully.
mandate.update.success.info = Mandate updated successfully.
mandate.already.exist.info = Mandate already exists.
mandate.searchresult.notfound= No Mandate found.
mandate.delete.success.info = Mandate deleted successfully.
mandate.cannot.delete.info = Mandate cannot be deleted as it is in use.
mandate.checkin.success.info = Mandate Checked in successfully.
mandate.checkin.failed.info = Mandate Check in failed.
mandate.checkout.success.info = Mandate Checked out successfully.
mandate.checkout.failed.info = Mandate Check out failed.
testpass.mandate.success.info = Mandate Test passed successfully.
testpass.mandate.faliure.info = Mandate Test failed.
testfail.mandate.success.info = Mandate Test Fail done.
testfail.mandate.faliure.info = Mandate Test Fail not done.
publish.mandate.success.info = Mandate Published successfully.
publish.mandate.faliure.info = Mandate Publish failed.
copy.mandate.success.info = Mandate copied successfully.
copy.mandate.faliure.info = Mandate copy failed.
sendForTest.mandate.success.info = Mandate Send For Test successfully.
sendForTest.mandate.faliure.info = Mandate Send For Test failed.
mandate.checkin.validation = Mandate can be Checked in successfully.
#Mandate Module Messages: End

#Benefit Component Module Messages: Start
benefit.component.save.success = Benefit Component created successfully.
benefit.component.update.success = Benefit Component updated successfully.
benefit.component.already.exist.info = Benefit Component already exists with same name and domain.
benefit.component.benefit.lines.values.override.success = Benefit lines updated successfully.
mandate.benefitHierarchy.searchresult.notfound = No Benefit Hierarchies found.
mandate.benefitHierarchy.delete.success = Benefit Hierarchy deleted successfully.
mandate.benefitHierarchy.update.success = Benefit Hierarchy updated successfully.
mandate.benefitHierarchy.create.success = Benefit Hierarchies created successfully.
benefit.hierarchy.checkin.success = Benefit Hierarchy Checked in successfully.
benefit.component.should.have.atleast.one.benefit.hierarchy = Benefit Component should have at least one Benefit Hierarchy.
benefit.component.validation.success = Benefit Component validated successfully.
benefit.component.validation.failure = Benefit Component validation failed.
benefit.Hierarchy.should.have.atleast.one.benefit = Benefit Hierarchy should have at least one Benefit.
benefit.component.publish.failure.info = Benefit Component Publish failed.
benefit.component.schedule.for.test.success.info = Benefit Component Scheduled For Test successfully.
benefit.component.schedule.for.test.failure.info = Benefit Component Scheduled for Test failed.
benefit.component.testPass.success.info = Benefit Component Test passed successfully.
benefit.component.testPass.failure.info = Benefit Component Test Pass failed.
benefit.component.testFail.success.info = Benefit Component Test Fail done.
benefit.component.testFail.failure.info = Benefit Component Test Fail not done.
please.enter.name.length=Name should not be less than 2 characters and more than 34 characters.
invalid.benefit.component = Updating failed. Some of the Benefit(s) attached to the Benefit Component is (are) not matching with the selected domain.
benefit.component.genbenefit.failure = General Benefit is not attached in the first position to the benefit component.
benefit.component.duplicate.failure = Benefit Component with the same Benefits already exists.
benefit.with.same.benefitcomponent.name = Benefit already exists with same name and domain.
benefit.component.name.exists = Name cannot be modified; Name and Domain combination already exists.
invalid.benefit.component.date.changed = Date cannot be changed since there are some benefits attached to this component.
benefit.component.genbenefit.position.failure = General Benefit not attached in the first position.
mandate.notes.update.success=Notes updated successfully.
duplicate.name.for.benefit  = Benefit already exists with same name and domain.
benefit.deleted = Benefits  (which do not match the changes made) are removed, if any.
atleast.one.level.required = Atleast one visible level required.
benefitcomponent.unlocked = Benefit Component {0} Unlocked successfully.
benefitcomponent.locked.by.another.user = Benefit Component {0} locked by another user.
#Benefit Component Module Messages: End.




#Question Component Messages: Start


benefit.save.success=Benefit created successfully.

benefit.update.success=Benefit updated successfully.
benefit.delete.success=Benefit {0} deleted successfully.
benefit.delete.failure=Benefit {0} cannot be deleted.








#Product Structure Messages



























component.deleted = All the Associated Benefit Components are removed, due to the change made.
component.not.attached = Please select the Benefit Component to be attached.
no.admin.option = No Admin Option to update.

##### Product Messages #######




















###### End of Product Messages  ##########


benefit.administration.option.delete.success=Benefit Administrative Option deleted successfully.

standard.benefit.hide.question = Question deleted successfully.

















std.benefit.publish=Benefit Published successfully.

benefit.component.benefit.administration.question.hide.success = Questions hidden successfully.
benefit.component.benefit.administration.question.unhide.success = Questions unhidden successfully.




#Catalog Messages: Start














#Sub-Catalog Messages: Start








subCatalog.item.association.failure = Please select atleast one item.


####Notes Messages####























approve.note.success.info = Note ({0}) Approved successfully.
reject.note.success.info = Note ({0}) Rejected successfully.
approve.note.faliure.info = Note Approve failed.
reject.note.faliure.info = Note Reject failed.







###Item message ###







product.question.deleted=Question detached successfully.

####NoteAttachment##########




mandatory.benefit.visible.required = Atleast one Benefit should be visible.
mandatory.benefit.line.visible.required = Atleast one Benefit Line should be visible.
mandatory.benefit.visible.needed = Atleast one Benefit level should be visible.


####NoteAttachment To Benefit##########
standardBenefit.notes.delete.success = Note detached successfully.
standard.benefit.notes.save.success = Note(s) attached successfully.
mandatory.fields.notes.required = Please select the note to be attached.
standardBenefit.notes.locate.success=Note(s) located successfully.

benefitlevel.max.term.check = Maximum 2 terms only allowed.
benefitlevel.max.qualifier.check = Maximum 2 qualifiers only allowed.
benefitlevel.benefit.value.not.number = Only numbers are allowed for Data Type {0} in the level {1}.
benefitlevel.benefit.value.not.decimalnumber = Only numbers/decimal numbers are allowed for Data Type {0} in the level {1}.
benefitlevel.benefit.value.greater.hundred = Only numbers <= 100 is allowed for Data Type {0} in the level {1}.
benefitlevel.benefit.value.max.integer = Limit exceeded for datatype {0} in the level {1}.
benefitlevel.benefit.value.valid.precision = Only {0} digits allowed after decimal point for datatype {1} in the level {2}.
dataType.mismatch.error.benefit.level = Only Boolean values (yes, no, y, n) are allowed for data type {0} in the level {1}.


############ question #################

question.value.not.number = Only numbers are allowed for Data Type {0}.
question.value.not.decimalnumber = Only numbers/decimalnumbers are allowed for Data Type {0}.
question.value.greater.hundred = Only numbers <= 100 is allowed for Data Type {0}.
question.value.max.integer = Limit exceeded for datatype {0}.
question.value.valid.precision = Only {0} digits allowed after decimal point for datatype {1}.
dataType.mismatch.error.question = Only Boolean values (yes, no, y, n) are allowed for data type Boolean.

############admin options#################
















##Security##




task.role.module.subtask.association=Task cannot be deleted as one or more role or module or subtask is associated with it.














role.update.success.info=Role Updated Successfully.
role.name.duplicate=Role with same name already exists.
role.delete.success =Role deleted successfully.

ate.startDate = Please provide a Date for creating a Date Segment.
contract.dateinvalid ={0} is invalid
contract.datesegment.invalid.comments = Please enter a reason for creation before confirmation.
create.contract.datesegment.insufficient.privilege = Insufficient privilege for create Contract Date Segment.
search.result.not.found=Your Search criteria did not return any results. Please change the criteria and try again.
search.result.exceeds= Search results exceeded 50 records. Please refine the search criteria and try again.
filtered.result.exceeds= Filtered results exceeded 50 records. Please refine the search criteria and try again.
requiredField = At least one criteria should be given for a Search.
please.enter.all.mandatory.fields = Missing required input fields.  Please provide data for the marked fields and re-submit the form.
please.enter.the.mandatory.field = Please enter the mandatory fields.
common.default=An unknown error occurred during processing.
common.log.id=Please contact IT Support.  Please include the log id in your error report.  Log ID {0}.
contract.rule.validate = Please select a new Rule Id if you want to edit the benefit meaning.
description.invalid=Please enter alphanumeric value for description.
security.invalid=User not authorized for the Task {0} in this module.

reserved.dates.condition01= Effective Date should be greater than or equal to current date.
reserved.dates.condition= Expiry Date should be within 3 years time period from Effective Date.
input.format.invalid = {0} is invalid.
effective.greater.expiry = Expiry Date must be greater than Effective Date.
expiry.date.should.be.greater.than.effective.date=Expiry Date should be greater than Effective Date.
description.field.should.have.minimum.of.2.characters.and.maximum.of.250.characters= Description field should have a minimum of 2 and a maximum of 250 characters.
description.field.should.have.minimum.of.10.characters.and.maximum.of.250.characters= Description can have minimum 10 and maximum 250 characters.
minor.heading.length=Name field should have minimum 2 characters and maximum 34 characters.
please.enter.all.required.information=Please enter the mandatory fields.
mandate.term.required=Benefit Term is required.
mandate.qulaifier.required=Benefit Qualifier is required.
mandate.pva.required=Provider Arrangement is required.
please.enter.correct.date.comparison=Expiry Date must be greater than Effective Date.
please.enter.description=Description can have minimum 10 and maximum 250 characters.
please.enter.mandate.description=Description should be more than 10 characters and less than 500 characters.
invalid.effective.date = Invalid Effective Date.
invalid.expiry.date = Invalid Expiry Date.
all.fields.blank = Please enter at least one search criteria.
please.enter.all.mandatory.fields=Missing required input fields. Please provide data for the marked fields and re-submit the form.

not.valid.number = Please enter a valid number for version number.
not.valid.date = Please enter a valid date.
standard.benefit.duplicate.value=This Minor Heading already exists.Please enter another.
benefit.definition.should.have.atleast.one.benefit.level=Benefit Definition should have at least one Benefit Level.
benefit.should.have.atleast.one.benefit.definition=Standard Benefit should have at least one Benefit Definition.
standard.benefit.validation.success=Benefit validated successfully.
benefitcomponent.with.same.benefit.name = Benefit Component already exists with same name and domain.
benefit.checkin.success=Benefit ({0}) checked in successfully.
standard.benefit.copy.success=Benefit copied successfully.
standard.benefit.copy.failure=Benefit copy failed.
benefit.schedule.for.test.success = Benefit scheduled for test.
benefit.test.pass = Benefit Test passed successfully.
benefit.test.fail = Benefit Test failed.
standardbenefit.checked.out.success.info= Benefit checked out successfully.
effective.date.not.within.boundary = Invalid Effective Date.
please.enter.name = Name should contain at least 1 character and less than 30 characters.
mandate.name.length = Mandate Name should contain less that 35 characters.
search.association.message1=No Associations found.
basic.search.criteria.error=Error in the search criteria identifier: {0}.
basic.search.criteria.error.at=Error in the search criteria identifier: {0}. Error At Position: {1}.
basic.search.criteria.error.after=Error in the search criteria identifier: {0}. Error After: {1}.
search.results.total.large=Number of search results exceeds 500. It is recommended that you search again after refining the criteria to avoid performance and usability problems.



cannot.be.removed= {0} cannot be removed since it is attached in Benefit Definition.
product.checkin.successful= Product ({0}) Checked in successfully.
invalid.citation.number=Citation Number should be an integer.
product.checkin.invalid= At least one benefit component should be associated before Check in.
product.checkin.valid=Product validated successfully.
benefit.admin.updated= Benefit Admin values updated successfully.
product.test.successful= Product ({0} )Scheduled For Test successfully.
product.test.failed = Product ({0}) Test Failed.
product.test.passed = Product ({0}) Test Passed successfully.
product.publish.successful= Product Published successfully.
product.schedule_for_approval.successful = Product Scheduled For Approval successfully.
product.approve.successful= Product ({0}) Approved successfully.
product.reject.successful= Product ({0}) Rejected successfully.
product.benefitcomponent.duplicate= Product cannot be Checked in as Duplicate Product found with same Benefit Components and order for the Domain.
product.benefitcomponent.duplicate.sendToTest= Duplicate Product found with same Benefit Components and order for the Domain.
product.schedule_test.failure= At least one benefit component should be associated before a Product is scheduled for test.
product.checkout.successful= Product ({0}) checked out successfully.
product.seq.empty = Sequence should not be empty
product.seq.invalid= Sequence should be number greater than zero.
product.seq.genBen.err= Only General Benefits Can have sequence number 1.

#Mandate Module Messages: Start
mandate.save.success.info = Mandate created successfully.
mandate.update.success.info = Mandate updated successfully.
mandate.already.exist.info = Mandate already exists.
mandate.searchresult.notfound= No Mandate found.
mandate.delete.success.info = Mandate deleted successfully.
mandate.cannot.delete.info = Mandate cannot be deleted as it is in use.
mandate.checkin.success.info = Mandate Checked in successfully.
mandate.checkin.failed.info = Mandate Check in failed.
mandate.checkout.success.info = Mandate Checked out successfully.
mandate.checkout.failed.info = Mandate Check out failed.
testpass.mandate.success.info = Mandate Test passed successfully.
testpass.mandate.faliure.info = Mandate Test failed.
testfail.mandate.success.info = Mandate Test Fail done.
testfail.mandate.faliure.info = Mandate Test Fail not done.
publish.mandate.success.info = Mandate Published successfully.
publish.mandate.faliure.info = Mandate Publish failed.
copy.mandate.success.info = Mandate copied successfully.
copy.mandate.faliure.info = Mandate copy failed.
sendForTest.mandate.success.info = Mandate Send For Test successfully.
sendForTest.mandate.faliure.info = Mandate Send For Test failed.
mandate.checkin.validation = Mandate can be Checked in successfully.
#Mandate Module Messages: End

#Benefit Component Module Messages: Start
benefit.component.save.success = Benefit Component created successfully.
benefit.component.copy.success = Benefit Component ({0}) copied successfully.
benefit.component.update.success = Benefit Component updated successfully.
benefit.component.already.exist.info = Benefit Component already exists with same name and domain.
benefit.component.benefit.lines.values.override.success = Benefit lines updated successfully.
mandate.benefitHierarchy.searchresult.notfound = No Benefit Hierarchies found.
mandate.benefitHierarchy.delete.success = Benefit Hierarchy deleted successfully.
mandate.benefitHierarchy.update.success = Benefit Hierarchy updated successfully.
mandate.benefitHierarchy.create.success = Benefit Hierarchies created successfully.
benefit.component.delete.success = Benefit Component ({0}) deleted successfully.
benefit.component.delete.failure = Benefit Component ({0}) cannot be deleted.
benefit.component.checked.out.success.info = Benefit Component ({0}) Checked Out successfully.
benefit.component.checked.out.failure.info = Benefit Component Checked Out failed.
benefit.component.checkin.success = Benefit Component ({0}) Checked in successfully.
benefit.component.check.in.failure.info = Check in of benefit component ({0}) failed.
benefit.hierarchy.checkin.success = Benefit Hierarchy Checked in successfully.
benefit.component.should.have.atleast.one.benefit.hierarchy = Benefit Component should have at least one Benefit Hierarchy.
benefit.component.validation.success = Benefit Component validated successfully.
benefit.component.validation.failure = Benefit Component validation failed.
benefit.Hierarchy.should.have.atleast.one.benefit = Benefit Hierarchy should have at least one Benefit.
benefit.hierarchy.invalid.benefit.change = Please remove the flagged benefits from the benefit hierarchies since they are not valid for this Benefit Component's domain or date range.
benefit.hierarchy.invalid.benefit = All the Benefits are not valid for the components business domain.
benefit.component.publish.success.info = Benefit Component ({0}) published successfully.
benefit.component.publish.failure.info = Benefit Component Publish failed.
benefit.component.schedule.for.test.success.info = Benefit Component Scheduled For Test successfully.
benefit.component.schedule.for.test.failure.info = Benefit Component Scheduled For Test failed.
benefit.component.testPass.success.info = Benefit Component Test Passed successfully.
benefit.component.testPass.failure.info = Benefit Component Test Pass failed.
benefit.component.testFail.success.info = Benefit Component Test Fail done.
benefit.component.testFail.failure.info = Benefit Component Test Fail not done.
please.enter.name.length=Name field should have minimum 2 characters and maximum 34 characters.
invalid.benefit.component = Updating failed. Some of the Benefit(s) attached to the Benefit Component is (are) not matching with the selected domain.
benefit.component.genbenefit.failure = General Benefit is not attached in the first position to the Benefit Component.
benefit.component.duplicate.failure = Duplicate Benefit Component found with same Benefits.
benefit.component.name.exists = Name cannot be modified; Name and Domain combination already exists.
invalid.benefit.component.date.changed = Date cannot be changed since there are some Benefits attached to this component.
benefit.component.genbenefit.position.failure = General Benefit not attached in the first position.
mandate.notes.update.success=Notes updated successfully.
business.domain.changed.please.change.state = There is a change in business domain. Please change the state.
#Benefit Component Module Messages: End

#Question Component Messages: Start
question.save.success.info = Question created successfully.
question.update.success.info = Question updated successfully.
question.add.success.info = Question added successfully.
mandate.question.searchresult.notfound = Your Search criteria did not return any results. Please change the criteria and try again.
answer.already.exist.info = Answer already exists.
question.delete.success.info = Question deleted successfully.
question.already.exist.info  = Question already exists.
dataType.mismatch.error = Type of Answer does not match with the selected data type.
question.checked.in.success.info = Question ({0}) Checked in successfully.
question.checked.out.success.info = Question Checked out successfully.
question.checked.in.failure.info = Question Check-in failed.
question.checked.out.failure.info = Question Check-out failed.
question.cannot.be.deleted.info = Question cannot be deleted as it is in use.
question.checked.in.validation.success.info = Question validated successfully.
question.validation.failure.info = Question Check-in validation failed.
question.test.validation.failure.info = Question Schedule For Test validation failed.
schedule.for.test.question.success.info = Question  Scheduled For Test successfully.
schedule.for.test.question.failure.info = Question Scheduled For Test failed.
publish.question.success.info = Question Published successfully.
unlocked.question.success.info = Question Unlocked successfully.
publish.question.failure.info = Question Publish failed.
unlocked.question.failure.info = Question Unlocked failed.
testPass.question.failure.info = Question Test Pass failed.
testPass.question.success.info = Question Test passed successfully.
testFail.question.failure.info = Question Test Fail not done.
testFail.question.success.info = Question Test Fail done.

#Question Component Messages: End

benefit.definition.save.success=Benefit Definition created successfully.
benefit.definition.update.success=Benefit Definition updated successfully.
benefit.definition.delete.success=Benefit Definition deleted successfully.
standard.benefit.save.success=Benefit created successfully.
standard.benefit.duplicate=Benefit already exists with same name and domain.
standard.benefit.update.success=Benefit updated successfully.
standard.benefit.delete.success=Benefit deleted successfully.
standard.benefit.delete.failure=Benefit cannot be deleted.
date.range.not.valid=Date ranges should not overlap. Please enter a valid date range.
benefit.mandate.delete.success= Benefit Mandate deleted successfully.
benefit.administation.date.range=Benefit Administration Expiry and Effective date range should be within the Benefit Definition date range.
benefit.administration.update.success=Benefit Administration updated successfully.
benefit.administration.save.success=Benefit Administration created successfully.
benefit.administration.save.failure=Benefit Administration creation failed.
benefit.administration.update.failure=Benefit Administration update failed.
benefit.administration.delete.success=Benefit Administration deleted successfully.
benefit.administration.delete.failure=Benefit Administration delete failed.
benefit.mandate.save.success=Benefit Mandate created successfully.
benefit.mandate.update.success=Benefit Mandate updated successfully.
benefit.mandate.datatype.required=Data Type field is mandatory.
mandate.benefitlevel.searchresult.notfound=No Benefit Levels found.
mandate.benefitline.searchresult.notfound=No Benefit Lines found.
benefit.adminoption.save.success=Benefit Administration Option saved successfully.
benefit.adminoption.update.success=Benefit Administration Option updated successfully.

#Product Structure Messages
product.structure.duplicate = Product Structure already exists with same name.
product.structure.duplicates =  Product Structure already exists with same name and domain.
product.structure.save.success = Product Structure created successfully.
product.structure.update.success = Product Structure updated successfully.
product.structure.benefitcmpnt.empty.for.test = At least one Benefit Component should be associated before scheduling a Product Structure to test.
product.structure.benefitcmpnt.empty = At least one Benefit Component should be associated before Check-in a Product Structure.
product.structure.checkin.success = Product Structure ({0}) Checked in successfully.
effective.date.should.greater.than.current.date = Effective Date should be greater than 01/01/1900.
expiry.date.should.greater.than.current.date = Expiry Date should be greater than 01/01/1900.
product.structure.benefitcmpnt.add.success = Benefit Components added successfully.
product.structure.benefitcmpnt.update.success = Benefit Component order updated successfully.
prod.seq.number.numeric = Sequence Number should be numeric.
produsctStructure.benftComponent.delete.suceessfully = Benefit Component Deleted successfully.
product.structure.delete = Product Structure ({0}) Deleted Successfully.
product.structure.associated = Product Structure is used in a Product and cannot be deleted.
product.structure.checkin.validation = Product Structure validated successfully.
product.structure.copy.success = Product Structure ({0}) copied successfully.
product.structure.schedule.for.test.success = Product Structure scheduled for test successfully.
product.structure.test.pass.success = Product Structure test passed successfully.
product.structure.test.fail.success = Product Structure test failed successfully.
product.structure.publish.success = Product Structure published successfully.
product.structure.unlock.success = Product Structure ({0}) unlocked successfully.
product.structure.domain.invalid = You cannot change the domain as some of the Benefit components are already associated with this domain.
product.structure.daterang.invalid = You cannot change date range as some of the Benefit components are already associated with this date range.
check.out.success = Product Structure ({0}) checked out successfully.
product.structure.heirarchy.present = Same set of Benefit components already exists.
product.structure.component.not.present = Benefit Component 'General Benefits' is mandatory.
benefit.component.gen.provision.not.present = Benefit Component 'General Provisions' is mandatory.
general.benefit.first = Benefit Component 'General Benefits' should be in first place.
product.structure.copy.remove.benefit.component = Benefit Components which do not match the domain/date range are removed if any.
no.benefit.visible = At least one Benefit should be visible for the Benefit Component(s) {0}.
invalid.domain.component.deleted = Associated Benefit Component(s) ({0}) deleted due to domain mismatch.
invalid.date.component.deleted = Associated Benefit Component(s) ({0}) deleted due to date mismatch.
##### Product Messages #######
product.create.successful = Product created successfully.
product.update.successful = Product updated successfully.
product.name.duplicate = Product already exists with same name and domain.
product.not.found = Product not found in database.
product.prodStr.domain.invalid = Associated product structure does not have all the domains specified for product.
product.prodStr.effective.date.invalid = Effective period of product should be within the effective period of product structure.
product.component.duplicate= Some of the components are already present.
product.component.saved= Benefit components saved successfully.
product.component.updated= Benefit Components updated successfully.
product.delete.successful= Product ({0}) deleted successfully.
sequence.number.input.validation = Sequence number should be integer.
product.benefitComponent.delete.suceessfully = Benefit Component deleted successfully.
prod.str.comp.not.found = No Benefit Components found.
product.str.modified = Associated Product Structure changed and hence Components has been removed.
product.copy.successful = Product ({0}) copied successfully.
product.key.change.invalid = Domains or Name cannot be changed for higher versions.
product.str.version.invalid = Associated Product Structure is not the latest version.
product.gen.benf.mandatory = Benefit Component 'General Benefits' is mandatory.
product.gen.provisions.mandatory = Benefit Component 'General Provisions' is mandatory.
product.gen.benf.mandatory.sendToTest = Benefit Component 'General Benefits' is mandatory.
product.str.change.cmpnts.not.copied = Product Structure modified and hence Benefit Components are not copied.
product.rule.validation.failure = Penalty method need to be coded for UM, PNR and DENIAL rules attached.
###### End of Product Messages  ##########


benefit.administration.option.delete.success=Benefit Administrative Option deleted successfully.

standard.benefit.hide.question = Question deleted successfully.
admin.option.exists=Admin Option already exists. Please choose another.
standard.benefit.in.use=Benefit is in use.
standard.benefit.deleted=Benefit deleted successfully .
benefit.question.update.success = Questions updated successfully .
benefit.value.updated=Benefit lines updated successfully .
no.benefit.definitions=No Benefit Definitions found.
mandate.sequence.required = Sequence field is mandatory.
mandate.benefitleveldescription.required = Description field is mandatory. Please note that the older value will be retained if the error is not corrected.
benefitleveldescription.lessthan32 = Associated Benefit Level Description has a limit of 32 characters. The application has truncated the description to 32 characters for the following benefit level(s): {0}

benefit.line.hide.unhide = Benefit Line Hide/Unhide successfully.
benefit.line.value.modified = Benefit Line Values updated successfully.
benefit.criteria.value.modified = Tier Criteria Values updated successfully.

benefit.level.create.success = Benefit Level(s) created successfully.
benefit.level.save.success = Benefit Level(s) updated successfully.

benefit.level.sps.save.success = References has been saved for benefit lines with unique reference match, if any.
benefit.level.sps.no.results = No records found matching the Term, Qualifier, PVA and Data type
benefit.level.delete.success = Benefit Level(s) deleted successfully.
benefit.line.delete.success = Benefit Line(s) deleted successfully.
delete.level.line.success = Benefit Level(s)/Line(s) deleted successfully.
benefit.line.in.use = Delete Failed. Benefit Line already in use.
	#benefit.level.in.use = Delete Failed. Benefit Level already in use.

benefit.publish=Benefit {0} published successfully.
benefit.component.benefit.administration.answer.override.success = Answers overridden successfully.
benefit.definition.not.valid=Benefit Administration date fall outside Benefit Definition date. Save failed.
benefitlevel.popup.results.not.found = Search results not found.
mandate.not.valid = Mandate selected is not valid for the given date. Please choose another.

#Catalog Messages: Start
catalog.save.success=Catalog created successfully.
catalog.update.success=Catalog updated successfully.
catalog.delete.success=Catalog deleted successfully.
catalog.item.associated=Catalog cannot be deleted as one or more Items or SubCatalogs are attached to it.
catalog.size.zero=Catalog size value should be between 1 and 15.
catalog.name.duplicate=Catalog already exists. Please provide a different one.
catalog.name.size = Catalog Name field should have minimum 1 character and maximum 30 characters.
notename.field.validate=Note Name field should have minimum 1 character and maximum 30 characters.
please.enter.brand.name = Brand Name field should have minimum 1 character and maximum 30 characters.
please.enter.prodCodeDesc.name = Product Code description can have a maximum of only 40 characters.
questions.length.invalid = Question field should have minimum 1 character and maximum 250 characters.
catalog.size.invalid = Catalog Size should be numeric.
catalog.datatype.update=Data type cannot be modified as one or more Items are attached to it.
catalog.size.update=Size cannot be modified as one or more Items are attached to it.
invalid.search.criteria = Invalid search criteria.
catalog.desc.update.success = Catalog description updated successfully.
catalog.name.invalid = Name should be Alphanumeric.

#Sub-Catalog Messages: Start
sub.catalog.save.success=Sub-Catalog created successfully.
sub.catalog.update.success=Sub-Catalog updated successfully.
sub.catalog.duplicate=Sub-Catalog already exists for the Catalog. Please provide a different Sub-Catalog.
sub.catalog.name.duplicate=Sub-Catalog Name already exists. Please provide a different Name.
sub.catalog.delete.success=Sub-Catalog deleted successfully.
subcatalog.cannot.be.deleted = Sub-Catalog cannot be deleted as one or more Parent Catalog Items associated with Sub-Catalog.
subcatalog.cannot.be.changed = Parent Catalog cannot be changed as one or more Parent Catalog Items associated with Sub-Catalog.
subCatalog.item.association.success = Item successfully associated with Sub Catalog.
subCatalog.item.deletion.success = Item successfully deleted from Sub Catalog.

####Notes Messages####
notes.save.success.info = Note created successfully.
notes.update.success.info = Note updated successfully.
notes.already.present.info = Note already exists.
sendForTest.note.success.info = Note send for test successfully.
publish.note.success.info = Note published successfully.
testpass.note.success.info = Note test passed successfully.
testfail.note.success.info = Note test fail done.
sendForTest.note.faliure.info = Note send for test failed.
publish.note.faliure.info = Note publish failed.
testpass.note.faliure.info = Note test pass failed.
testfail.note.faliure.info = Note test fail not done.
note.checkin.success.info = Note ({0}) checked in successfully.
note.checkin.failed.info = Note check in failed.
notes.delete = Note ({0}) deleted successfully.
note.checkin.validation = Note validated successfully.
checkout.note.success.info = Note({0}) checked out successfully.
checkout.note.faliure.info = Note check out failed.
product.note.attached= Note(s) attached successfully.
copy.note.success.info = Note ({0}) copied successfully.
copy.note.faliure.info = Note copy failed.
term.qualifier.validation = Please select term for the qualifier.
notes.datadomain.save.success.info = Data domains saved successfully.
notes.datadomain.delete.success.info = Data domain deleted successfully.

no.domain = No Data Domains available.
term.qualifier.delete.validation = Please delete all qualifiers before deleting the term.
noteId.field.invalid = Please enter a valid Note Id.
noteName.field.invalid = Entered note name does not exist.
notetext.field.validate = Note text cannot have more than 3000 characters.

###Item message ###
item.save.success.info = Item created successfully.
item.update.success.info = Item updated successfully.
item.already.exists = Item already exists.
product.note.deleted=Note detached successfully.
bc.notes.deleted = Note(s) detached successfully.
product.notes.delete.failed = Detaching of Notes Failed.
item.delete.success.info = Item deleted successfully.
item.size.invalid = Primary Code length should be equal to Catalog size,{0}.
primary.code.invalid = Primary Code should be alphanumeric.

####NoteAttachment##########
product.note.deleted=Note detached successfully.
notes.hide = Note hidden successfully.

mandatory.fields.notes.required = Please select the Note to be attached.

adminoption.mandatory.type=No Admin Option allowed for Mandate Product Type.
mandatory.fields.adminoption.required=Please select the Admin Option to be attached.

############ rule options #################
product.rule.save.success= Product rule(s) attached successfully.
product.rule.save.duplicate= Product rule(s) already exists.
product.rule.updated.success= Product rule(s) updated successfully.
product.rule.invalid = Product rule(s) value should be alphanumeric.
contract.rule.invalid = Contract rule(s) value should be alphanumeric.
product.rule.delete.success= Product rule having EWPD Rule ID {0} deleted successfully.
product.rules.delete.success= Product rule(s) deleted successfully.
product.rule.delete.success2= Product rule detached successfully.
product.rule.type.not.found= No Rule Type Found.
product.rule.id.not.found= No Rule Id found.
############admin options#################

product.admin.attached=Admin option attached successfully .
product.admin.notfound= No Admin option found.
product.admin.saved= Admin option(s) attached successfully.
product.admin.updated= Admin option updated successfully.
product.adminoption.delete= Admin option(s) detached successfully.

advanced.search.criteria.error.logical = Logical operator (AND/OR) needs to be specified for criteria, {0}.
search.results.total.zero=Your Search criteria did not return any results. Please change the criteria and try again.
advanced.search.criteria.type.error=The {0} should be a {1}.
advanced.search.criteria.error=Error in the search criteria identifier: {0}
advanced.search.criteria.sign.between.error=Your Search criteria: {0} should match with the format: {1} for the sign {2}.
advanced.search.criteria.sign.error=Your Search criteria: {0} should not have any operators if sign operator is selected.
search.attachment.message=No attachments found.
advanced.search.criteria.validation.error=At least one of the attribute should be selected.

##Security##
task.save.success.info = Task Created Successfully.
task.update.success.info = Task Updated Successfully.
task.delete.success=Task deleted successfully.
task.module.subtask.association=Task cannot be deleted as one or more module or subtask is associated with it.
role.subtask.association=Sub-Task cannot be deleted as one or more role is associated with it.
task.name.duplicate = Task with same Name and Type already exists.
subtask.save.success.info = Sub-Task Created Successfully.
subtask.update.success.info = Sub-Task Updated successfully.
subtask.name.duplicate = Sub-Task with same Name already exists.
module.save.success.info = Module created successfully.
module.update.success.info = Module updated successfully.
module.name.duplicate = Module with same Name already exists.
module.delete.success=Module deleted successfully.
module.role.association=Module cannot be deleted as one or more Role is configured with it.
module.task.association=Module cannot be deleted as one or more Task or SubTask is configured with it.
module.associate.success.info = Task(s) associated successfully.
module.associate.delete.success.info = Task association deleted successfully.
role.task.association.success.info = Task(s) associated successfully.
role.subtask.association.success.info = Sub-Task(s) associated successfully.
role.save.success.info=Role created successfully.
role.update.success.info=Role updated successfully.
subtask.delete.success=Sub-Task deleted successfully.
role.module.association.success.info=Module(s) associated successfully.
role.task.delete.association.info=Task association deleted successfully.
role.subtask.delete.association.info = Sub-Task association deleted successfully.

role.task.associated = Task cannot be deleted as one or more SubTask is configured with it.
role.module.delete.association.info=Module association deleted successfully.
role.module.associated =Role cannot be deleted as one or more Module or Task or SubTask is associated with it.
benefit.approved=Benefit {0} approved successfully.
benefit.rejected=Benefit {0} rejected successfully.
benefit.component.approve.success.info= Benefit Component ({0}) Approved successfully.
benefit.component.reject.success.info= Benefit Component ({0}) Rejected successfully.
product.structure.approve.success = Product Structure ({0}) Approved successfully.
product.structure.reject.success = Product Structure ({0}) Rejected successfully.

benefit.line.dataType.mandatory = Data Type is mandatory for each Benefit Line.
benefit.line.reference.mandatory = Reference is mandatory for each Benefit Line.
benefit.line.value.mandatory = Benefit Value is mandatory for each Benefit Line.
benefit.line.reference.unique = Benefit line reference should be unique. Duplicate reference identified at the level ( {0} ) in the line with PVA ( {1} ) and at the level ( {2} ) in the line with PVA ( {3} ).
benefit.level.description.unique = Benefit Level Description should be unique.
adminoption.reference.unique = Unique Reference validation failed.

##Migration Wizard##

pricing.info.save.success = Pricing Information saved successfully.
pricing.info.delete.success = Pricing Information deleted successfully.
search.contract.locked = Contract cannot be migrated as it is locked in Legacy.
search.contract.does.not.exists = Searched Contract does not exist.
no.valid.contract = No valid Contract exists in Legacy system.
migration.generalInfo.saved = General Information saved successfully.
migration.product.retrieve.info = No Product is mapped yet. Please select a Product.
product.info.save.success = Product Information saved successfully.
product.info.update.success = Product Information updated successfully.
migation.completed.for.contract = This Contract has already been migrated.
migation.secondtime.for.contract = The contract is already migrated. Do you want to migrate rest of the Date Segments.
migation.secondtime.basecontract.markfordelete =Associated base contract is Marked for Deletion. Are you sure you want to continue the migration ?
mandatory.fields.migration.product.required = Please enter the mandatory fields.
migration.started.for.contract= Migration for this contract has already been started by another user.
migration.ended.for.contract= Contract {0} migrated sucessfully.The Date Segment is created and the contract is checked-out.Please check-in the contract to continue any further migration.
migration.ended.BYCYConflict.contract= Contract {0} migrated sucessfully.The Date Segment is created and the contract is checked out.
migration.bnftYrIndConflict.product = Benefit Year Indicator value in the selected Product is different from the Legacy Contract. Do you want to continue?
migration.bnftYrIndConflict.model = Benefit Year Indicator value in the selected Model Contract is different from the Legacy Contract. Do you want to continue?
#migration.ended.for.contract= Contract Migration completed successfully.
#migration.validation.status= This contract is in {0} status. cannot be check_out.
migration.validation.status= Cannot proceed migration as the contract status is {0} in ETAB.
migration.contract.datesegment.discontinuous=There are missing Date Segments in ET-AutoBagging system and hence cannot migrate rest of the Date Segments.
migration.contract.datesegment.discontinuous.status= Migration is not possible since the Date Segment(s) having effective date {0} is not in 'Transferred to Production' status in {1} system.
migration.contract.existing= Contract cannot be migrated as this Contract Id exist in eWPD.
migration.contract.deleted=Contract cannot be migrated as it is already migrated and deleted from ET-AutoBagging system.
#migration.rule.invalid = Penalty method need to be coded for UM and PNR rules attached for the Date Segment having Effective Date {0}.
migration.rule.invalid = Attached UM, PNR and DENIAL rules need to be coded for the combination (Date Segment effective date:ewpd rule id) {0}.
migration.contract.datesegement.allthroughstep8= The Date Segment(s) having effective date {0} need to complete Step 8 before confirm operation.
cancel.migration.success = Current migration is cancelled.
migration.partially.done.renew = Renew option is not valid for a partially migrated contract.

step.three.should.process = Please complete step 3 for further navigation.
step.four.should.process =  Please complete step 4 for further navigation.
step.five.should.process =  Please complete step 5 for further navigation.
step.six.should.process =  Please complete step 6 for further navigation.
step.seven.should.process =  Please complete step 7 for further navigation.
step.eight.should.process =  Please complete step 8 for further navigation.
step.number.update.success = Step number updated successfully.
migration.not.possible = Migration not possible since Contract status is either Scheduled to Production or Scheduled to Test.
migration.pricinginfo.save.duplicate = Given pricing information already exists.
variables.saved.success = Mapped Variables saved successfully.
migration.please.select.datesegment = Please select a Date Segment.
invalid.Date.Segment.Entry = Selected Start Date should be between Start Date and End Date of latest Date Segment.
migration.not.possible.for.contract.with.null.values = Contract cannot be migrated as there is no associated Benefit Structure Date Segment(s).
migration.already.exists.ewpd = Selected Contract already exists in eWPD.
#migration.already.started.another.option = Migration for this Contract has already started with another option.
migration.already.started.another.option = Migration for this Contract has already started with {0} option.
benefit.structure.not.associated = Contract cannot be migrated as there is no associated Benefit Structure Date Segment(s).
contract.scheduled.to.test = Migration not possible since Contract is Scheduled to Test.
contract.transferred.to.production = Migration is not possible since the Contract is not in Transferred to Production status.
contract.scheduled.to.production = Migration not possible since Contract is Scheduled to Production.
not.enough.date.segments = The contract has only one Date Segment. This option is not valid.
product.structure.locked = Product Structure is locked. Please try after some time.
variables.deleted.success = Mapped Variables deleted successfully from master table.
insufficient.privilege.cp2000migration = Insufficient privileges for CP2000 Migration.
insufficient.privilege.cpmigration = Insufficient privileges for CP Migration.
migration.no.corporate.plan.code = Corporate Plan Code required for {0} since the Product Family is HMO/POS.
no.variable.notes = No Variable Notes available
migration.notes.save.success = Notes migration information saved successfully.
## End of Migration Wizard


product.rule.inavlid=Check in Validation failed.The attached Rule-id is in Status:Deleted.
product.domain.mismatch = The mapped product is not valid for the domains selected. Please change the product and try again.
adminmethod.save.success = Admin Methods saved successfully.
adminmethod.tier.save.success = Tiered Admin Methods saved successfully.

all.superprocess.Steps.notselected.benefit= Admin methods for all Super Process Steps are not selected in Benefit Administration ({0}).
admin.method.not.present.benefit= Admin methods not present in Benefit Administration ({0}).
admin.method.filter.failed.benefit= Admin method selected is not according  to filter criteria in Benefit Administration ({0}) for Super Process Step: {1}.
no.admin.method.found=No Method available for the criteria.
admin.method.exceeds.fifty=Admin method exceeded 50. Please refine the criteria and try again.
gb.admin.method.applicable=Admin method selected in General Benefits is applicable here
superprocess.Step.notselected= Admin method for the Super Process Step ({4}) is not selected in the Benefit Administration, ({1}) of the Standard Benefit, ({0}) for the Benefit Component , ({2}).
all.superprocess.Steps.notselected= Admin methods for all Super Process Steps are not selected in the Benefit Administration, ({1}) of the Standard Benefit, ({0}) for the Benefit Component , ({2}).
admin.method.not.present= Admin methods not present in  the Benefit Administration, ({1}) of the Standard Benefit, ({0}) for the Benefit Component , ({2}).
admin.method.filter.failed= Admin method selected is not according  to filter criteria for the Super Process Step: {3}, under the Benefit Administration ({1}), of the Standard Benefit ({0}), for the Benefit Component ({2}).
admin.method.general.filter.failed= Admin method selected is not according  to filter criteria for the Super Process Step: {3}, under the Benefit Administration ({1}), of the Standard Benefit ({0}), for the Benefit Component ({2}).
all.superprocess.Steps.notselected.contract= Admin methods for all Super Process Steps are not selected in the Benefit Administration, ({1}) of the Standard Benefit, ({0}) for the Benefit Component , ({2}) in the Date Segment having effective Date ,({4}).
admin.method.filter.failed.contract= Admin method selected is not according  to filter criteria for the Super Process Step: {3}, under the Benefit Administration ({1}), of the Standard Benefit ({0}), for the Benefit Component ({2})  in the Date Segment having effective Date ,({4}).
admin.method.general.filter.failed.contract= Admin method selected is not according  to filter criteria for the Super Process Step: {3}, under the Benefit Administration ({1}), of the Standard Benefit ({0}), for the Benefit Component ({2}) in the Date Segment having effective Date ,({4}).
admin.method.entity.checkin.validation.status.check.failed = Admin Method Validation status check failed.

product.latest.version.avlbl= New Version of ProductStructure is Available.
product.adminoption.delete.successful = Admin option deleted successfully.

admin.option.update = Admin Option Hide Status Updated Successfully.
admin.option.hide.success = Admin option hidden successfully.
benefitcomp.adminoption.update.successful = Admin option updated successfully.
benefitcomp.adminoption.nochange = No Admin Option to save.
product.checkin.invalid.not.unique = Unique Reference Validation Failed.

product.checkin.invalid.questrefnot.unique = Check In Failed. The reference attached to the Question ({2}) in the Admin Option ({3}) and the Question ({4}) in the Admin Option ({5}) in the Benefit ({0}) of the Benefit Component ({1}) is duplicate.
checkout.final.message.1 = {0}.
checkout.final.message.2 = {0}.
checkout.final.message.3 = {0}.
checkout.final.message.4 = {0}.
checkout.final.message.5 = Product Structure Modified.
checkout.final.message.6 = Attached Product Structure and BenefitComponents are removed.
benefitcomponent.mandatory.benefit = Check In Failed.Atleast one benefit should be visible in Benefit Component({0}).

benefit.line.hidden.success = Benefit Lines updated successfully.

answer.overriddden.successfully = Answer overidden successfully.

question.overridden.successfully = Question override/hide status updated successfully.
unlock.benefit = Benefit ({0}) Unlocked successfully.
product.unlocked = Product ({0}) Unlocked successfully.
note.lock.notacquired = Unable to attain lock.
note.lock.acquired = Note ({0}) Unlocked successfully.


add.word.success = The word ({0}) successfully added to the dictionary.
add.word.failure = Word was not added to the dictionary.
dictionary.failure = Failed to load the dictionary file.
word.already.found = The word ({0}) already exists in the dictionary.
add.word.valid = Please enter a valid word
add.only.word = Only words can be added to the dictionary.

select.component = Please select the component to be saved.
questionnaire.insert.success = Root Question(s) added successfully.
questionnaire.update.success = Root Question(s) updated successfully.
reference.empty = Please select reference for all the questions.
no.questions.selected = Please select question to add.
questionnaire.delete.success = Root question(s) deleted successfully.
duplicate.question.added = Question({0}) already present in the selected list.

##Links in Messages##
sampledata = NO LINK
productDuplicateReferenceView=../product/productDuplicateReferenceView.jsp
contractDuplicateReferenceView=../contract/referenceValidationPopup.jsp
adminOptionDuplicateReferenceView=../adminoptions/adminOptionDuplicateReferenceView.jsp
unique.ref.validation = Unique Reference Validation.
uncoded.variable.notes = Notes attached to un-coded benefitlines/unanswered questions.
unique.ref.list.truncated = There are  more {0} having duplicate references which are not listed below.
product.rule.validation.link = ../product/productRuleValidationPopUp.jsp
product.rule.validation.error = Rule validation failed.
contract.rule.validation.link = ../contract/contractRuleValidationPopUp.jsp
contract.sps.validation.error = Admin Method SPS Validation Failed.
contract.sps.validation.link = ../adminMethods/adminMethodSPSValidationIntermediatePage.jsp?initial=Y
##SPS Mapping messages##
spsMapping.create.success=SPS Mapping created successfully.
spsMapping.create.failure.spsparam.mandatory.validation=Please select a mandatory field.
spsMapping.create.failure.oneAttr.mandatory.validation=At least one blue exchange code should be selected.
spsMapping.update.success=SPS Mapping updated successfully.
sps.deleted.success = SPS Mapping ({0}) deleted successfully.
search.greater.limit.size = Number of data per search criteria should be less than or equal to 1000. Please refine the search criteria for ({0})
##Custom MessageText messages##
customMessageText.create.success = Custom message text created successfully.
custom.message.size.large = Custom message should not exceed 40 characters.
customMessageText.update.success = Custom message text updated successfully.
customMessageText.duplicate = Same combination of Header rule and SPS parameter already exists.
custom.message.delete.success = Custom Message for the ({0} - {1}) mapping deleted successfully.
benefit.component.questionnare.save.successful = Questionnaire updated successfully.
benefit.questionnaire.save.successful = Benefit Questionnaire updated Successfully.
child.questions.added = Child Questionnaires added successfully.
child.questions.updated = Child Questionnaires updated successfully.
questionnaire.add.mandatory.fields = Please enter mandatory fields.
questionnaire.sequence.mandatory.fields = Sequence is mandatory.
questionnaire.answer.mandatory.fields = Answer is mandatory.
questionnaire.question.mandatory.fields = Question is mandatory.
questionnaire.reference.mandatory.fields = Reference is mandatory.
questionnaire.lob.mandatory.fields = Line of Business is mandatory.
questionnaire.businessentity.mandatory.field = BusinessEntity is mandatory.
questionnaire.businessgroup.mandatory.fields = BusinessGroup is mandatory.
child.questions.deleted = Child Questionnaires deleted successfully.
invalid.rule = Rule is Invalid.
already.mapped= Rule is already mapped .
atleast.oneservicetypecode = Atleast one service type code should be selected.

spsMapping.create.failure.hsd2.mandatory.validation = HSD2 is mandatory as HSD1 is selected. Please enter value for HSD2.
spsMapping.create.failure.hsd2.value.range.validation = HSD2 can have minimum value of 1 and maximum value of 15
spsMapping.create.failure.hsd4.value.range.validation = HSD4 can have minimum value of 1 and maximum value of 6
spsMapping.create.failure.hsd6.value.range.validation = HSD6 can have minimum value of 1 and maximum value of 3

spsMapping.create.failure.hsd2.validation = HSD2 accepts only numeric values. Please enter a value between 1 and 15.
spsMapping.create.failure.hsd4.validation = HSD4 accepts only numeric values. Please enter a value between 1 and 6.
spsMapping.create.failure.hsd6.validation = HSD6 accepts only numeric values. Please enter a value between 1 and 3.

benefit.maximum.number.exceeded = The limit of benefit hierarchies for a benefit component is 256. Only {0} more benefit(s) can be attached.
benefit.zero.number.exceeded = The limit of benefit hierarchies for a benefit component is 256. No more benefits can be attached.
product.detached.successfully = Product detached successfully from step 5.
Filter.results.zero = No search results found for the entered search criteria.
comments.length.invalid=Comments field should have minimum 1 character and maximum 250 characters.
contractid.reserve.success.info=Contract Ids reserved consecutively from {0} to {1}.
contractid.reserve.success.continuous={0} Contract Id(s) reserved consecutively from {1} to {2}.
contractid.reserve.success.noncontinuous={0} Available Contract Id(s) reserved from {1} to {2}.
contractid.reserve.count.success.info = {0} Contract Ids from {1} are reserved.
available.contractid.reserve.success.info = Available Contracts are reserved.
valid.contract.id = Please enter a valid Contract Id.
valid.count = Please enter a numeral value in 'Number of ID(s) to Generate' field.
no.list.to.reserve=No Contracts are available to reserve.
end.contract.id.smaller = Please enter a Through Contract Id greater than From Contract Id.
contractid.release.success.info=Contract Ids released consecutively from {0} to {1}.
contractid.release.success.info=Contract Ids released consecutively from ({0}) to ({1}).
no.reserved.contracts = No reserved contract Ids exist for the mentioned range.
contract.id.to.release=Please enter the Contract Ids to release.
no.expired.contract.ids=No expired contract Ids are selected.
free.contractid.release.success.info=Selected Contract Ids released successfully.
consecutive.ids.not.available.for.reserving=Consecutive contract Ids are not available for reserving.
all.reserved.contracts.use=All reserved contract Ids in use.
no.reserved.contracts.in.range=No reserved contracts available within the given startId and endId.
expired.contracts.release.success=Expired contracts Ids released successfully.
selected.contractid.release.success.info=Selected contract Ids released successfully.
selected.contractid.release.single.success.info=Contract Id {0} is released successfully.
enter.valid.contract.id=Please enter contract Id in valid format.
all.expired.ids.inuse=All Expired Ids in Use.
contract.not.released = Contracts not Released. Contracts are either InUse or Reserved by another User.

contract.checkin.invalid.not.unique = Unique Reference Validation Failed.
product.structure.marked.deleted = Product Structure attached is in the status Marked For Deletion. Please change the Product Structure.

contract.checkin.bycy.answr = BY/CY Question is Not Answered for the Date Segment having Effective Date {0}.

contract.benefit.component.rule.updated = Benefit component rule Information updated successfully.

benefit.question.note.save.successful = Note attached successfully.

benefit.question.note.update.successful = Note updated successfully.

benefit.question.note.delete.successful = Note detached successfully.
mapping.exist = Mapping already exists.
mapping.update.success = Mapping updated successfully.
benefit.tier.delete = Tier deleted successfully.
benefit.tier.add = Tier added successfully.
level.in.benefit.tier.delete = Benefit Level deleted from Tiers successfully.
invalid.range.in.tier = {0} has invalid range of values: {1} {2}.
invalid.range.in.tier.wclc = {0} has invalid range of values: {1} {2}/ {3} {4}
benefit.tier.criteria.not.number = Criteria value should be numeric for numeric dataType Fields. Error at {0}.
overlapping.values.in.tier={0} has overlapping values.
invalid.values.in.tier.wclc = This Criteria is not a valid Tier Criteria for Nested Tiering.
duplicate.level.with.samecrt.values ={0} Same criteria already exists for this level.

alert.message.general.benefits = Only General Benefits can have sequence number {0}.
alert.message.general.provisions = Only General Provisions can have sequence number {0}.
alert.message.general.supplemental = Only Supplemental Benefits can have sequence number {0}.
entered.sequence.invalid = Range of Sequence should be within {0} to {1}.
productStructure.benefitcmpntcompoent.inavlidlines =The Benefit component(s) ( {0} ) does not have any relevant benefit lines for the selected product family . And hence cannot be attached with this product structure.
product.benefitcmpntcompoent.inavlidlines = The Benefit component(s) ( {0} ) does not have any relevant benefit lines for the selected Business Entity. And hence cannot be attached with this product
productStructure.update.productfamily = ProductFamily was changed.So hide/unhide of lines and questions are done based on the newly selected ProductFamily.
product.update.productfamily.businessentity = Business Entity was changed.So hide/unhide of lines and questions are done based on the newly selected Business Entity.

benefit.comp.should.be.of.same.ruletype.as.associated.benefits=The benefit component should have RuleType same as the associated benefits.
benefits.should.be.of.same.ruletype = The benefits of a component should have same rule type.
product.components.should.be.of.same.ruletype = The components of a product should have same rule type.
contract.segments.should.be.of.same.ruletype = The rules of date segment with Effective Date : {0} should be of same type.

testcase.save.success=Test Case created successfully.
testcase.update.success=Test Case updated successfully.
testsuite.save.success=Test Suite created successfully. Please add Test Cases.
testsuite.update.success=Test Suite updated successfully.

product.tier.save.result = Tier Definition cannot be deleted as Tiered level(s) exist for the Tier Definition.
please.enter.Claim.Line.mandatory.fields = Please provide data for the marked Claim Line fields.
product.tier.update.success.result = Tier definition updated successfully
wtt.description.invalid.length= Description should not be more than 300 characters.

benefitcomponent.frequency.value.check = Frequency value is incorrect. Frequency cannot have a value less than 1.
benefitlevel.benefit.frequency.not.number = Frequency accepts only numeric value. Error at the Benefit Level {0}.
benefitlevel.benefit.frequency.not.empty = Frequency cannot be empty. Error at Benefit Level {0}.
mandate.benefitlevelfrequency.required = Frequency field can not be 0.
testcase.exists = Given Test Case already exists. Please enter a different Test Case Name and try again..
testsuite.exists = Given Test Suite already exists. Please enter a different Test Suite Name and try again..
testsuite.ref=Test Case can not be deleted since it is associated with a Test Suite
testcase.diagnosiscode = Maximum 5 diagnosis code only allowed.

adminmethod.number.invalid= Please enter a valid Admin Method No.
adminmethod.desc.invalid = Please enter a valid Admin Method Description.
adminmethod.processmthd.invalid = Please select a Processing Method.
adminmethod.desc.invalidpattern = Incorrect patten found in the admin method description.
adminmethod.map.create.success = Admin Method created successfully.
adminmethodmapping.map.create.success=Admin Method Mapping created successfully
adminmethod.map.edit.success=Admin Method updated successfully.
adminmethodmapping.map.edit.success=Admin Method Mapping updated successfully.
adminmethod.maintain.mantadory.fields=Please enter the mandatory fields.

product.benefit.geninfo.save.success.result = Benefit General Information updated successfully.
product.bc.geninfo.save.success.result = Benefit Component General Information updated successfully.

rule.type.validation.link.product = ../product/ruleTypeValidationProductPopup.jsp?module=product
rule.type.validation.link.contract = ../contract/ruleTypeValidationContractPopup.jsp?module=contract
rule.type.validation = Rule Type Validation.
contract.rule.type.validation = Benefit and Benefit Component Rules of the Contract should be of same type.
product.rule.type.validation = Benefit and Benefit Component Rules of the Product should be of same type.

notsupport.domain.attributes.many=eWPD does not support too many combinations for the domain attributes.

contractreport.contract.mandotry = Contract Code is mandatory.
contractreport.contract.excceds = Number of Contract Code exceeds {0}.
contractreport.eff.invalid = Effective date provided is not valid.
contractreport.contract.invalid = Given Contract Code(s) {0} does not exists.
contractreport.component.invalid = Given Benefit Component(s) {0} does not exists.
contractreport.benefit.invalid = Given Benefit(s) {0} does not exists.

contractreport.output.mandatory = At least one of Header Rules, Benefit Lines, Questions, Admin Methods should be Selected.

contractreport.mutliplecont.bnft.mandatory = For multiple Contracts Benefit Component or Benefit is mandatory.
contractreport.component.limit = For multiple Contracts maximum of {0} Components Can be specified.
contractreport.benefit.limit = For multiple Contracts maximum of {0} benefits Can be specified.
contractreport.earlierrequest = Your earlier request is still being processed.
contractreport.componentbenefitinvalid = Component and Benefit criteria cannot be specified together. 

contract.status.code.not.available = Archival Indicator is mandatory.
contract.reason.code.not.available = Reason code is mandatory when Archival Indicator is INACTIVE or TERMED.
contract.statusdate.code.not.available =  Archival Date is mandatory when Status is INACTIVE or TERMED.
contract.status.validation.error = Archival Indicator validation failed.
contract.accum.validation.error = Accumulator Question not answered. {0}
contract.tier.accum.validation.error = Accumulator Question not answered in the tier. {0}
accum.not.available.claimsys = Following accumulators are not available in Claims System. {0}
accum.deleted.in.sys = Following accumulators are deleted from Claims System. {0}
non.standard.accumulator.set = Standard accumulator not set for question : <BR> {0}
invalid.accumulator.set = Invaild Accumulator Set : {0}
# EBX validation messages for SSCR -16332
mtm.process.error = The MTM validations has encountered an issue and cannot display the validation errors. Please click on confirm to continue with checking in the contract.
#june 2014 LO Primary code validations
invalid.primary.code=Please enter proper Primary code.
#Feb 2015 Indicative Long Term Solution
empty.file=No data in the selected file. {0}
import.only.test=Import allowed in only Test region. Please select Test.
file.nochanges=No changes identified.
upload.error=An unknown error occurred during processing. Please try after sometime
mandatory.fileName=File name is mandatory.Please enter valid xls file.
file.notexist=File does not exist.
duplicate.segCodes=Duplicate segment code(s) {0}. Could not proceed Import operation
segCodes.doesnot.exists = Segment code(s) {0} does not exist in the system. Could not proceed Import operation
importfile.invalid=File name is invalid. Please insert valid xls file.
indicative.upload.done.success=Import done successfully.
indicative.copytoprod.done.success=Copy To Prod done successfully.
mandatory.params.missing=Some of the mandatory fields are missing in the excel sheet.
#Validation Message for Indicative Segmnet TEST Region
prod.nochanges=No changes identified.
importfile.invaliddata=Invalid data in the input file. Selected segment and region is not matching with any of the data
INVALID_REGION_IMPORT=Import is not applicable for PROD region.
INVALID_REGION_COPY_TO_PROD=Copy To Prod is not applicable for TEST region.  
no.changes.identified = No changes identified
mandatory.field.missing = Mandatory fields are missing from input excel. 